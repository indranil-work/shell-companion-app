<!DOCTYPE html>
<html>
<head>
  <title>Dashboard</title>
  <link rel="stylesheet" href="/css/style.css">
  <script>
    const auth0Domain = '<%= auth0Domain %>';
    const clientId = '<%= clientId %>';
    const appMode = '<%= appMode %>';
  </script>
</head>
<body>
  <div class="container">
    <h2>Dashboard</h2>
    <div id="tokenInfo"></div>
    <div id="errorInfo" class="error"></div>
    <button onclick="refreshToken()" class="btn">Refresh Token</button>
    <button onclick="logout()" class="btn">Logout</button>
  </div>

  <script>
    function decodeToken(token) {
      try {
        const base64Url = token.split('.')[1];
        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
        return JSON.parse(window.atob(base64));
      } catch (error) {
        return null;
      }
    }

    async function exchangeToken(nativeToken) {
      try {
        const response = await fetch('/exchange-token', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ native_token: nativeToken })
        });

        const tokens = await response.json();
        if (!response.ok) throw new Error(tokens.error || 'Token exchange failed');

        return tokens.access_token;
      } catch (error) {
        document.getElementById('errorInfo').innerText = 
          'Failed to obtain Auth0 token: ' + error.message;
        return null;
      }
    }

    async function refreshToken() {
      const auth0RefreshToken = localStorage.getItem('auth0_refresh_token');
      const nativeToken = localStorage.getItem('native_token');
      
      if (auth0RefreshToken) {
        try {
          const response = await fetch('/refresh-token', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ refresh_token: auth0RefreshToken })
          });

          const tokens = await response.json();
          localStorage.setItem('auth0_access_token', tokens.access_token);
          localStorage.setItem('auth0_refresh_token', tokens.refresh_token);
          displayTokenInfo();
        } catch (error) {
          console.error('Failed to refresh token:', error);
        }
      } else if (nativeToken) {
        if (appMode === 'auth0') {
          // Exchange token and display info without storing
          const auth0Token = await exchangeToken(nativeToken);
          if (auth0Token) {
            const decodedToken = decodeToken(auth0Token);
            document.getElementById('tokenInfo').innerHTML = `
              <h3>Auth0 Token Information (Exchanged):</h3>
              <pre>${JSON.stringify(decodedToken, null, 2)}</pre>
            `;
          }
          // If exchange failed, error is already displayed
        } else {
          // Just refresh the page to show native token info
          location.reload();
        }
      } else {
        // No tokens found, redirect to login
        window.location.href = '/login';
      }
    }

    function logout() {
      const auth0Token = localStorage.getItem('auth0_access_token');
      
      // Clear local storage
      localStorage.removeItem('auth0_access_token');
      localStorage.removeItem('auth0_refresh_token');
      localStorage.removeItem('native_token');

      if (auth0Token) {
        // Auth0 logout
        window.location.href = `https://${auth0Domain}/v2/logout?client_id=${clientId}&returnTo=${encodeURIComponent(window.location.origin)}`;
      } else {
        // Native logout
        window.location.href = '/';
      }
    }

    function displayTokenInfo() {
      const auth0Token = localStorage.getItem('auth0_access_token');
      const nativeToken = localStorage.getItem('native_token');
      
      let decodedToken;
      let tokenType;

      if (auth0Token) {
        decodedToken = decodeToken(auth0Token);
        tokenType = 'Auth0';
      } else if (nativeToken) {
        decodedToken = decodeToken(nativeToken);
        tokenType = 'Native';
      }

      const tokenInfo = document.getElementById('tokenInfo');
      if (decodedToken) {
        tokenInfo.innerHTML = `
          <h3>${tokenType} Token Information:</h3>
          <pre>${JSON.stringify(decodedToken, null, 2)}</pre>
        `;
      } else {
        tokenInfo.innerHTML = '<p>No valid token found</p>';
      }
    }

    // Display token info on page load
    displayTokenInfo();
  </script>
</body>
</html> 